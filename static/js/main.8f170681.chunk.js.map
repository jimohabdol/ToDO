{"version":3,"sources":["TodoForm.js","Todo.js","TodoList.js","About.js","Title.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","input","addTodo","id","ref","node","placeholder","onClick","value","Todo","todo","remove","complete","className","style","isCompleted","fontStyle","color","textDecoration","text","type","key","onChange","TodoList","todos","todoNode","map","About","Component","Title","to","Footer","window","App","props","console","log","setState","prevState","data","state","apiURL","bind","removeTodo","newTodo","axios","post","then","response","push","sort","a","b","delete","reminder","this","filter","sorted","exact","path","render","Fragment","component","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8f170681.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nconst TodoForm = ({addTodo}) => {\r\n    //input tracker\r\n    let input;\r\n    return(\r\n      <div id=\"form\">\r\n        <input ref={node => input=node} placeholder=\"Add To Do...\"/>\r\n        <button \r\n          onClick={() =>{ \r\n          addTodo(input.value)\r\n          input.value = ''\r\n          input.placeholder=\"Add To Do...\"}\r\n          }>\r\n          +\r\n        </button>\r\n      </div>\r\n    )  \r\n}\r\n\r\nexport default TodoForm","import React from \"react\";\r\n\r\nconst Todo = ({todo, remove, complete}) => {\r\n\r\n    const completedStyle = {\r\n        fontStyle: \"italic\",\r\n        color: \"#cdcdcd\",\r\n        textDecoration: \"line-through\"\r\n    }\r\n\r\n    return(\r\n    <div>\r\n        <p className=\"todos\" style={todo.isCompleted ? completedStyle : null}> \r\n          {todo.text}\r\n          <span className=\"removeBtn\"\r\n            onClick={()=>{remove(todo.id)}}\r\n          >\r\n            x\r\n          </span>\r\n          <input type=\"checkbox\" key={todo.id}\r\n            onChange={()=>{complete(todo.id)}}\r\n          />\r\n        </p>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Todo","import React from \"react\"\r\nimport Todo from \"./Todo\";\r\n\r\nconst TodoList = ({todos, remove, complete}) => {\r\n    const todoNode = todos.map(todo => {\r\n      return (<Todo todo={todo} key={todo.id} remove={remove} complete={complete}/>)   \r\n     })\r\n       return (\r\n        <div id=\"list\">\r\n                <p id=\"info\"> Your Todos: </p>\r\n          {todoNode}\r\n        </div>\r\n       )    \r\n}\r\n\r\nexport default TodoList","import React, { Component, Fragment } from 'react';\r\n\r\nclass About extends Component {\r\n  \r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <p> \r\n                    Version 1.0.0\r\n                </p>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default About;","import React from 'react'\r\nimport { Link} from 'react-router-dom'\r\n\r\nfunction Title() {\r\n    return(\r\n     <div id=\"titleWrapper\">\r\n        <h3 className=\"textCenter\">TO-DO List</h3>\r\n        <Link to='/'>Home</Link>|<Link to='/about'>About</Link>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Title","import React from 'react'\r\n\r\nconst Footer = () => {\r\n\treturn (\r\n\t\t<div id=\"footer\">\r\n      <p>\r\n        Jimoh Abdulrahman\r\n      </p>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\n\r\nexport default Footer","import React, {Component} from 'react'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport TodoForm from './TodoForm'\nimport TodoList from './TodoList'\nimport About from \"./About\"\nimport Title from './Title'\nimport Footer from './Footer'\nimport axios from 'axios'\nimport './style.scss';\n\nwindow.id = 0\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      data: []\n    }\n\n    this.apiURL = 'https://jsonplaceholder.typicode.com/todos'\n    this.addTodo = this.addTodo.bind(this);\n\t\tthis.removeTodo = this.removeTodo.bind(this)\n  }\n  \n  addTodo(value) {\n    const newTodo = {\n      text: value,\n      isCompleted: false,\n    }\n    axios.post('https://5e4bbf9ca641ed0014b022d3.mockapi.io/api/todo', newTodo)\n      .then(response => {\n        this.state.data.push(newTodo)\n        this.setState({data: this.state.data.sort((a, b) => b.id - a.id )})})\n    //updata data\n    // this.state.data.push(newTodo)\n    //updata state\n    //this.setState({data: this.state.data})\n    \n  }\n  \n  removeTodo(id) {\n    axios.delete(`https://5e4bbf9ca641ed0014b022d3.mockapi.io/api/todo/${id}`)\n    const reminder = this.state.data.filter(todo => {\n      if(todo.id !== id) {\n        return todo\n      }\n    })\n    this.setState({data: reminder})\n  }\n  \n  complete = (id) => {\n    console.log(id)\n    this.setState(prevState => {\n      const updatedTodos = prevState.data.map(todo => {\n        if(todo.id===id) {\n            return {\n              ...todo,\n              isCompleted: !todo.isCompleted\n            }\n        }\n        return todo\n      })\n        return {data: updatedTodos};\n    })\n  }\n\n  componentDidMount() {\n    axios('https://5e4bbf9ca641ed0014b022d3.mockapi.io/api/todo')\n      .then(response => {\n        const sorted = response.data\n        sorted.sort((a, b) => (b.id - a.id))\n        this.setState({data: sorted})\n      })\n  }\n  \n  render() {\n    return(\n      <Router>\n        <div id=\"container\">\n          <Title />\n          <Route exact path='/' render={props => (\n            <React.Fragment>\n             <TodoForm addTodo={this.addTodo} />\n             <TodoList \n              todos={this.state.data} \n              remove={this.removeTodo} \n              complete={this.complete}\n              />\n            </React.Fragment>\n          )} />\n          <Route path='/about' component={About} />\n          <Footer />\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}